What happens when you initialize a repository? Why do you need to do it?

    Git files are created when you initialize a repository, allowing it
    to be tracked and ready to use. Without doing this, you cannot commit
    any files or use any git features within it.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area is a temporary location for only the files that you
    want to include in next commit to stay. This allows you to pick and
    choose files that are relevant to a specific change only, without
    altering others in the commit. It also allows you to view what files
    have changed in the status, without having to see all of the others.

How can you use the staging area to make sure you have one commit per logical
change?

    The staging area allows certain files to be added for each commit, which
    allows the user to make combinations of files that only relate to one
    change each. In addition, using the diff commands can help the user to see
    exactly what has changed and remove anything that is not relevant.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    Branches would help in situations where you are testing out a new feature
    and you do not want to harm any of the original code, or when you think that
    the addition you will doing will take longer to perfect. This way you can
    still update the original without needing to be ready to launch the new
    feature yet.

How do the diagrams help you visualize the branch structure?

    The diagrams help by showing me what commits are connected to each other and
    how a branch creates a totally new line of them.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    When two branches are merged, the differences between them are combined into
    whatever branch you are currently in. This branch then becomes the new
    master and all commits are logged by timestamp.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

    The pros of Git's automatic merging largely revolve around the amount of
    time saved. The software can generally figure out what has changed, which
    means the user does not need to manually track every change in other
    people's code. However, Git is not smart enough to tell which change is the
    logically correct one, so it can sometimes result in frustrating conflicts
    that the user may feel they shouldn't have to manually deal with.

