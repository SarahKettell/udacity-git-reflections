When would you want to use a remote repository rather than keeping all your
work local?

    Using a remote repository is great when you want to share your work with
    others, either for them to use or edit. It is also useful for group projects
    where multiple people are creating something together. In addition, a remote
    repository creates a backup of your important changes to your project, which
    are retrievable if something happens to your local copy. However, if your
    project is private or not at a stage you are comfortable sharing, keeping it
    solely on a local repository is better.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    If you have Git pull changes automatically, it is possible that you might
    have a change to your local that you did not want yet. Maybe you are working
    on a new feature or something on a separate branch, but the pull updates the
    branch in a way that messes up your current work.

Describe the differences between forks, clones, and branches. When would you use
one instead of another?

    Forks are a feature of GitHub. It is like their version of cloning, where
    you create a copy of someone else's repository on GitHub. Clones work the
    same way with local repositories. Branches, on the other hand, are separate
    routes within the same repository that allow for multiple changes to be
    worked on at once. They only have one master.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    Having a copy of the last known state of the remote stored locally allows
    for offline comparison of any changes between the two versions. This also
    makes it easy to resolve merge conflicts without internet access.

How would you collaborate without using Git or GitHub? What would be easier, and
what would be harder?

    You could collaborate using a file sharing system such as Dropbox or
    manually exhange files via hardware or email. GitHub makes this process much
    easier because it handles all of the changes for you and keeps track of
    everything.

When would you want to make changes in a separate branch rather than directly in
master? What benefits does each approach have?

    You might want to make changes in a branch when you are testing out an idea
    that you want others you are collaborating with to give feedback on. This
    makes it easier for them to review your changes. In addition, it doesn't
    prevent anyone else from working on their own code, or even merging to
    master.
